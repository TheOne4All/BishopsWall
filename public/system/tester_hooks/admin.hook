<?php

use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\PHPMailer;

class Admin extends Processor
{
    public function __construct()
    {
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/PHPMailer.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/Exception.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/SMTP.php';

        $this->helpers = new Helpers();
        $this->mail = new PHPMailer(true);
    }

    public function index($registration = null)
    {
        if (isset($_SESSION['authenticated']) && $_SESSION['authenticated'] == true) {
            $this->redirect('dashboard/index');
        }
        $this->with('registration', $registration)->show('resources/pages/admin/signin');
    }

    public function verify_user_signin()
    {
        if (isset($_SESSION['authenticated']) && $_SESSION['authenticated'] == true) {
            $this->redirect('dashboard/index');
        } else {
            extract($_POST);
            $uniqueId = 'JISCHOOL';
            $getUserResult = $this->get_record('ci_user', 'user_id, org_id, user_email, user_pass, user_role')->where('user_email', $user_email)->and_where('is_active', '1')->and_where('org_id', $uniqueId)->limit(1)->go();
            if (!empty($getUserResult)) {
                if ($getUserResult[0]['user_pass'] == hash("sha512", md5($user_pass))) {
                    // Get personal data of user
                    $getPersonData = $this->get_record('ci_staff', 'firstname, lastname, middlename, img, courses_designation')->where('org_id', $uniqueId)->and_where('user_id', $getUserResult[0]['user_id'])->limit(1)->go();
                    $_SESSION['user_info'] = [
                        'user_id' => $getUserResult[0]['user_id'],
                        'IP' => $this->helpers->get_client_IP(),
                        'user_role' => $getUserResult[0]['user_role'],
                        'user_email' => $user_email,
                        'fullname' => $getPersonData[0]['lastname'] . ', ' . $getPersonData[0]['firstname'] . ' ' . $getPersonData[0]['middlename'],
                        'img' => $getPersonData[0]['img'],
                        'courses_designation' => isset($getPersonData[0]['courses_designation']) ? $getPersonData[0]['courses_designation'] : null,
                        'org_id' => $getUserResult[0]['org_id'],
                    ];
                    // Get system settings data of user
                    $getOrgData = $this->get_record('ci_org')->where('unique_id', $getUserResult[0]['org_id'])->limit(1)->go();
                    $_SESSION['org'] = [
                        'unique_id' => $getUserResult[0]['org_id'],
                        'email' => $getOrgData[0]['email'],
                        'default_template' => $getOrgData[0]['default_template'],
                        'default_row_per_page' => $getOrgData[0]['default_row_per_page'],
                        'default_theme' => $getOrgData[0]['default_theme'],
                        'img' => $getOrgData[0]['img'],
                    ];
                    // get admin path session
                    $_SESSION['admin_path'] = $getUserResult[0]['user_role'] == 1 ? 'admin' : 'auth';
                    //get session status of user
                    $getSessionResult = $this->get_record('ci_user_session')->where('user_id', $_SESSION['user_info']['user_id'])->go();
                    if ($getSessionResult == true) {
                        $this->show('resources/pages/admin/sessionexist');
                    } else {
                        /* Register the current Sessions on the database */
                        $result = $this->register_login_session();
                        if ($result == true) {
                            $_SESSION['log']['note'] = 'Signed-In Successfully!';
                            $this->add_record('ci_log', $_SESSION['log'])->go();
                            $this->redirect('dashboard/index');
                        } else {
                            $this->with('danger', 'Authentication Failed!')->redirect('admin/index');
                        }
                    }
                } else {
                    $this->with('danger', 'Wrong Password!')->redirect('admin/index');
                }

            } else {
                $this->with('danger', 'Email Doesn\'t Exist!')->redirect('admin/index');
            }
        }
    }

    public function verify_session_signin(): bool
    {
        /* Check that the Session has been started */
        $this->delete_record('ci_user_session')->where('user_id', $_SESSION['user_info']['user_id'])->go();
        $result = $this->register_login_session();
        if ($result == true) {
            $this->redirect('dashboard/index');
        } else {
            $this->with('danger', 'Authentication Failed!')->redirect('admin/index');
        }
    }

    /* Logout the current user */
    public function signout($notice = '')
    {
        /* If there is no logged in user, do nothing */
        if (!isset($_SESSION['user_info']['user_id'])) {
            $this->redirect('admin/index');
        }

        /* Reset the account-related properties */

        unset($_SESSION['user_info']);
        unset($_SESSION['authenticated']);
        /* If there is an open Session, remove it from the account_sessions table */
        if (session_status() == PHP_SESSION_ACTIVE) {
            /* Delete query */
            $session_array = [
                'session_id' => session_id(),
            ];
            switch ($notice) {
                case 'expired':
                    $_SESSION['log']['note'] = 'Session Expired!';
                    break;
                case 'disconnected':
                    $_SESSION['log']['note'] = 'Connected from Another Location!';
                    break;

                default:
                    $_SESSION['log']['note'] = 'Signed-Out Successfully!';
                    $this->delete_record('ci_user_session', $session_array)->go();
                    break;
            }
            $uniqueId = $_SESSION['log']['org_id'];
            $notice = $_SESSION['log']['note'];
            $this->add_record('ci_log', $_SESSION['log'])->go();
            unset($_SESSION['log']);
            session_destroy();
            $this->with('success', $notice)->redirect('admin/index');
        }
    }

    /* Saves the current Session ID with the account ID */
    private function register_login_session()
    {
        /* Check that a Session has been started */
        if (session_status() == PHP_SESSION_ACTIVE) {
            /*     Use a REPLACE statement to:
            - insert a new row with the session id, if it doesn't exist, or...
            - update the row having the session id, if it does exist.
             */
            $user_session = [
                'session_id' => session_id(),
                'org_id' => $_SESSION['user_info']['org_id'],
                'user_id' => $_SESSION['user_info']['user_id'],
            ];

            $_SESSION['log'] = [
                'org_id' => $_SESSION['user_info']['org_id'],
                'user_id' => $_SESSION['user_info']['user_id'],
                'user_role' => $_SESSION['user_info']['user_role'],
                'IP' => $_SESSION['user_info']['IP'],
                'name' => $_SESSION['user_info']['fullname'],
                'note' => '',
            ];
            $_SESSION['login_time'] = date('Y-m-d h:i:s');
            $_SESSION['last_active_time'] = time();
            $_SESSION['session_id'] = $user_session['session_id'];
            $_SESSION['authenticated'] = true;
            return $this->replace_record('ci_user_session', $user_session)->go();
        }
    }

    public function register()
    {
        isset($_SESSION['authenticated']) && $_SESSION['authenticated'] == true ? $this->redirect('dashboard/index') : $this->show('resources/pages/admin/register');
    }

    public function verify_user_registration()
    {
        extract($_POST);
        $validate_insert = [];
        $org_array = [
            'unique_id' => "JISCHOOL",
            'type_id' => "2",
            'name' => "Jencube International High School",
            'email' => "tech@thecheckit.com",
        ];
        $user_array = [
            'user_id' => $this->guidv4(),
            'user_pass' => hash("sha512", md5($password)),
            'user_phone' => 'NIL',
            'user_role' => 1,
            'user_name' => $firstname . $lastname,
            'user_email' => $email,
            'org_id' => $org_array['unique_id'],
        ];
        $staff_array = [
            'user_id' => $user_array['user_id'],
            'firstname' => $firstname,
            'lastname' => $lastname,
            'role_id' => 1,
            'dob' => date("Y-m-d"),
            'address' => 'NIL',
            'email' => $email,
            'phone' => 'NIL',
            'employee_id' => 'NIL',
            'org_id' => $org_array['unique_id'],
            'date_of_joining' => date("Y-m-d"),
        ];
        $get_org_record = $this->get_record('ci_org')->where('unique_id', $org_array['unique_id'])->go();
        if (empty($get_org_record)) {
            $org_insert = $this->add_record('ci_org', $org_array)->go();
            array_push($validate_insert, $org_insert);
        }
        $user_insert = $this->add_record('ci_user', $user_array)->go();
        $staff_insert = $this->add_record('ci_staff', $staff_array)->go();
        array_push($validate_insert, $user_insert);
        array_push($validate_insert, $staff_insert);
        if (in_array(false, $validate_insert)) {
            if (empty($get_org_record)) {
                $this->delete_record('ci_org')->where('unique_id', $unique_id)->go();
            }
            $this->delete_record('ci_user', ['user_id' => $user_array['user_id']])->and_where('org_id', $unique_id)->go();
            $this->delete_record('ci_staff', ['user_id' => $user_array['user_id']])->and_where('org_id', $unique_id)->go();
            $this->with('danger', 'Registration was Unsuccessful!')->redirect('admin/register');
        } else {
            // From email address and name
            $this->mail->From = 'donotreply@thecheckit.com';
            $this->mail->FromName = "DoNotReply";
            // To address and name
            $this->mail->addAddress($email);
            // Send HTML or Plain Text email
            $this->mail->isHTML(true);
            $this->mail->Subject = "Registration Information";
            $this->mail->Body = '
                <div style="margin: 100px; padding: 20px; background-color: #F5F5F5;">
                    <div style="width: 100%; margin-bottom: 20px;"><h3>Auth Credentials</h3></div>
                    <div style="width: 100%; margin-bottom: 10px;"><b>Username</b>: <em>' . $email . '</em></div>
                    <div style="width: 100%; margin-bottom: 10px;"><b>Password</b>: <em>' . $password . '</em></div>
                    <div style="width: 100%; margin-bottom: 10px;"><em>Note: Please manage CheckIt Resourcefully. Thank you!</em></div>
                </div>';
            // Send mail
            try {
                $this->mail->send();
                $mail_status = '<em class="bold">Mail Sent: </em>';
            } catch (Exception $e) {
                $mail_status = '<em class="text-warning bold">Mailer Error: </em>';
            }
            $_SESSION['log']['note'] = 'Registration was Successfully!';
            $this->add_record('ci_log', $_SESSION['log'])->go();
            $this->with('success', $mail_status . $_SESSION['log']['note'])->redirect('admin/index/1');
        }
    }

    public function reset($uniqueId = null)
    {
        if (isset($_SESSION['authenticated']) && $_SESSION['authenticated'] == true) {
            $this->redirect('dashboard/index');
        }
        $getOrgData = $this->get_record('ci_org', 'name, img')->where('unique_id', 'JISCHOOL')->limit(1)->go();
        if (empty($getOrgData) || is_null($getOrgData)) {
            $this->redirect('admin/index');
        }
        $orgImg = !empty($getOrgData) && count($getOrgData) == 1 ? $getOrgData[0]['img'] : null;
        $this->with('orgImg', $orgImg)->show('resources/pages/admin/reset');
    }

    public function reset_password_email()
    {
        extract($_POST);
        $getOrgData = $this->get_record('ci_org', 'email')->where('unique_id', $uniqueId)->limit(1)->go();
        if (empty($getOrgData) || is_null($getOrgData)) {
            $this->redirect('admin/index');
        }
        $getUserData = $this->get_record('ci_user', 'user_id, user_email')->where('org_id', 'JISCHOOL')->and_where('user_email', $user_email)->limit(1)->go();
        if (empty($getUserData) || is_null($getUserData)) {
            $this->with('danger', 'E-mail does not Exist!')->redirect('admin/index');
        }
        if (session_status() == PHP_SESSION_ACTIVE) {
            /*     Use a REPLACE statement to:
            - insert a new row with the session id, if it doesn't exist, or...
            - update the row having the session id, if it does exist.
             */
            $reset_password = [
                'token_id' => session_id(),
                'org_id' => $uniqueId,
                'email' => $user_email,
            ];
            $this->replace_record('ci_reset_password', $reset_password)->go();
        }
        session_destroy();
        // Get email settings data of user
        $getMailSettings = $this->get_record('ci_settings_mail')->where('org_id', $uniqueId)->limit(1)->go();
        // If SMTP method is enabled
        if (!empty($getMailSettings) && $getMailSettings[0]['mail_method'] == 2) {
            // Enable SMTP debugging.
            $this->mail->SMTPDebug = 0;
            // Set PHPMailer to use SMTP.
            $this->mail->isSMTP();
            // Set SMTP host name
            $this->mail->Host = $getMailSettings[0]['smtp_server'];
            // Set this to true if SMTP host requires authentication to send email
            $this->mail->SMTPAuth = true;
            // Provide username and password
            $this->mail->Username = $getMailSettings[0]['smtp_username'];
            $this->mail->Password = FynxCryptor::decrypt($getMailSettings[0]['smtp_password'], FYNX_CRYPTO_KEY);
            // If SMTP requires TLS encryption then set it
            !empty($getMailSettings[0]['ssl_tls']) ? $this->mail->SMTPSecure = FynxCryptor::decrypt($getMailSettings[0]['ssl_tls'], FYNX_CRYPTO_KEY) : null;
            // Set TCP port to connect to
            $this->mail->Port = $getMailSettings[0]['smtp_port'];
        }

        // From email address and name
        $this->mail->From = $getOrgData[0]['email'];
        $this->mail->FromName = "Administrator";
        // To address and name
        $this->mail->addAddress($user_email);
        // Send HTML or Plain Text email
        $this->mail->isHTML(true);
        $this->mail->Subject = "Reset Password";
        $this->mail->Body = '
            <div style="margin: 100px; padding: 20px; background-color: #F5F5F5;">
                <div style="width: 100%; margin-bottom: 20px;"><h3>Password Reset URL information</h3></div>
                <div style="width: 100%; margin-bottom: 10px;"><b>Username</b>: <em>' . $user_email . '</em></div>
                <div style="width: 100%; margin-bottom: 10px;"><em>Note: Please <a href="' . FYNX_PUBLIC['url'] . '/admin/verify_reset_password/' . $uniqueId . '/' . $reset_password['token_id'] . '" target="_blank"><b>Click Here</b></a> to change your password. Thank you</em></div>
            </div>';
        // Send mail
        // $mail_status = !$this->mail->send() ? "Mailer Error: " : "Mail Sent: ";
        try {
            $this->mail->send();
            $alert_bg = 'success';
            $mail_status = "Check E-mail to Confirm Reset!";
        } catch (Exception $e) {
            $alert_bg = 'danger';
            $mail_status = "Mailer Error: E-mail not Sent!";
        }
        $this->with($alert_bg, $mail_status)->redirect('admin/index');
    }

    public function verify_reset_password($uniqueId = null, $tokenId = null)
    {
        $getOrgData = $this->get_record('ci_org', 'name, img')->where('unique_id', 'JISCHOOL')->limit(1)->go();
        empty($tokenId) || is_null($uniqueId) || empty($getOrgData) || is_null($getOrgData) ? $this->redirect('admin/index') : null;
        $getTokenResult = $this->get_record('ci_reset_password')->where('token_id', $tokenId)->and_where('org_id', $uniqueId)->limit(1)->go();
        if (empty($getTokenResult)) {
            $this->with('danger', 'Token does not Exist!')->redirect('admin/index/' . $uniqueId);
        }
        $orgImg = !empty($getOrgData) && count($getOrgData) == 1 ? $getOrgData[0]['img'] : null;
        $this->with('uniqueId', $uniqueId)->with('tokenId', $tokenId)->with('email', $getTokenResult[0]['email'])->with('orgImg', $orgImg)->show('resources/pages/admin/reset_password');
    }

    public function reset_password()
    {
        extract($_POST);
        if (!empty($new_pass) && ($new_pass === $confirm_pass)) {
            $user_array['user_pass'] = hash("sha512", md5($new_pass));
            $user_update = $this->update_record('ci_user', $user_array)->where('user_email', $email)->and_where('org_id', $uniqueId)->go();
            switch ($user_update) {
                case false:
                    $this->with('danger', 'Reset Password was Unsuccessful!')->redirect('admin/verify_reset_password/' . $uniqueId . '/' . $tokenId);
                    break;
                default:
                    $this->delete_record('ci_reset_password')->where('org_id', $uniqueId)->and_where('email', $email)->go();
                    $this->with('success', 'Reset Password Successfully!')->redirect('admin/index/' . $uniqueId);
                    break;
            }
        }
        $this->with('danger', 'Passwords not Equal!')->redirect('admin/verify_reset_password/' . $uniqueId . '/' . $tokenId);

    }
}