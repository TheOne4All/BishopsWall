<?php

use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\PHPMailer;

class Examinee extends Processor
{

    public function __construct()
    {
        $this->user = new FynxUser;
        $session_exist = $this->user->user_session_exist($this->user->get_user_session_data());
        if ($session_exist == false) {$this->redirect('auth/signout/disconnected');}
        if ($this->user->idle_time() == true) {$this->redirect('auth/signout/expired');}

        $_SESSION['user_info']['user_role'] == 3 ? $this->redirect('dashboard/index') : $_SESSION['user_info']['user_role'];

        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/PHPMailer.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/Exception.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/SMTP.php';

        $this->filesystem = new FynxFileSystem();
        $this->helpers = new Helpers;
        $this->mail = new PHPMailer(true);

    }

    public function index($currentPage = 1, $entry = null)
    {
        if ($this->helpers->set_role_permission("3,0", "view") === true) {
            if (!is_null($entry)) {$_SESSION['org']['default_row_per_page'] = $entry;}
            $allActiveTest = $this->get_record('ci_test')->where('org_id', $_SESSION['user_info']['org_id'])->and_where('start_date', date('Y-m-d'), '<=')->and_where('end_date', date('Y-m-d'), '>=')->or_where('result_duration_date', date('Y-m-d'), '>')->go();
            $allCategories = $this->get_record('ci_category', 'name')->where('org_id', $_SESSION['user_info']['org_id'])->and_where('group_type', 'examinees')->order_by('base_name,created_at', 'ASC')->go();
            $allMsgTemps = $this->get_record('ci_message_tpl')->where('org_id', $_SESSION['user_info']['org_id'])->order_by('created_at')->go();
            $filter_array = 'admission_no, firstname, lastname, middlename, current_address, email, phone, gender, category_id, user_id, rfid_code, created_at';
            if (isset($_POST) && !empty($_POST)) {
                extract($_POST);
                $_SESSION['search_filter'] = [
                    'search_table' => $search_table,
                ];
            }

            $allPersons = $this->get_record('ci_person', $filter_array);
            !isset($_SESSION['search_filter']['search_table']) || $_SESSION['search_filter']['search_table'] == null ? $allPersons->search('') : $allPersons->search($_SESSION['search_filter']['search_table']);
            $allPersons = $allPersons->and_where('org_id', $_SESSION['user_info']['org_id'])->order_by('created_at')->go();

            $this->with('currentPage', $currentPage)->with('allCategories', $allCategories)->with('allMsgTemps', $allMsgTemps)->with('allPersons', $allPersons)->with('allActiveTest', $allActiveTest)->with('search_filter', $_SESSION['search_filter'])->show('resources/examinee/index');
        } else { $this->with('warning', 'Unauthorized Permission!')->redirect('dashboard/index');}
    }

    public function add()
    {
        // Package limit Verification
        $allPersons = $this->get_record('ci_person', 'created_at')->where('org_id', $_SESSION['user_info']['org_id'])->go();
        if (count($allPersons) >= $_SESSION['package']['examinees']) {$this->with('danger', 'Package Limit Exceeded!')->redirect('examinee/index');}

        extract($_POST);
        if (isset($_FILES)) {
            foreach ($_FILES as $key => $value) {
                if (!empty($value['name'])) {
                    $this->filesystem->allow_overwriting();
                    $this->filesystem->set_input($key);
                    $this->filesystem->set_destination_directory(FYNX_PUBLIC['media'] . 'user-profile/');
                    // $this->filesystem->set_filename($user_id . '.%s');
                    $this->filesystem->set_auto_filename('.%s');
                    $this->filesystem->set_upload_function("copy");
                    $this->filesystem->save();
                    $img = $this->filesystem->get_info()->filename;
                    // Callback in before upload
                    // $this->filesystem->set_callback_input(function ($data) {
                    //     echo "<h3>Start!</h3>";
                    // });

                    // Callback in after upload
                    // $this->filesystem->set_callback_output(function ($data) {
                    //     $img = $data->filename;
                    // echo "<h3>End!</h3>";
                    // if ($data->status === true) {
                    //     echo "<p>The " . $data->filename . " file has been uploaded</p>";
                    // } else {
                    //     echo "<p>The " . $data->filename . " file could not be uploaded to the server</p>";
                    // }
                    // });
                }
            }
        }
        $user_array = [
            'user_id' => $this->guidv4(),
            'user_pass' => hash("sha512", md5("Password@1")),
            'user_phone' => $phone,
            'user_role' => 3,
            'user_name' => strtolower($firstname . '.' . $lastname),
            'user_email' => $email,
            'org_id' => $_SESSION['user_info']['org_id'],
        ];
        $examinee_array = [
            'user_id' => $user_array['user_id'],
            'firstname' => $firstname,
            'lastname' => $lastname,
            'middlename' => $middlename,
            'category_id' => $category_id,
            'gender' => $gender,
            'current_address' => $current_address,
            'email' => $email,
            'phone' => $phone,
            'admission_no' => $admission_no,
            'img' => isset($img) ? $img : null,
            'org_id' => $_SESSION['user_info']['org_id'],
        ];

        if (is_null($examinee_array['img'])) {unset($examinee_array['img']);}
        $user_insert = $this->add_record('ci_user', $user_array)->go();
        $examinee_insert = $this->add_record('ci_person', $examinee_array)->go();
        $result = array($user_insert, $examinee_insert);
        switch ($result) {
            case array(false, true):
                $this->delete_record('ci_staff', ['user_id' => $user_array['user_id']])->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
                $this->with('danger', 'Add Examinee was Unsuccessful!')->redirect('examinee/index');
                break;
            case array(true, false):
                $this->delete_record('ci_user', ['user_id' => $user_array['user_id']])->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
                $this->with('danger', 'Add Examinee was Unsuccessful!')->redirect('examinee/index');
                break;
            case array(false, false):
                $this->with('danger', 'Add Examinee was Unsuccessful!')->redirect('examinee/index');
                break;
            default:

                // Get email settings data of user
                $getMailSettings = $this->get_record('ci_settings_mail')->where('org_id', $_SESSION['user_info']['org_id'])->limit(1)->go();
                // If SMTP method is enabled
                if (!empty($getMailSettings) && $getMailSettings[0]['mail_method'] == 2) {
                    // Enable SMTP debugging.
                    $this->mail->SMTPDebug = 0;
                    // Set PHPMailer to use SMTP.
                    $this->mail->isSMTP();
                    // Set SMTP host name
                    $this->mail->Host = $getMailSettings[0]['smtp_server'];
                    // Set this to true if SMTP host requires authentication to send email
                    $this->mail->SMTPAuth = true;
                    // Provide username and password
                    $this->mail->Username = $getMailSettings[0]['smtp_username'];
                    $this->mail->Password = FynxCryptor::decrypt($getMailSettings[0]['smtp_password'], FYNX_CRYPTO_KEY);
                    // If SMTP requires TLS encryption then set it
                    !empty($getMailSettings[0]['ssl_tls']) ? $this->mail->SMTPSecure = FynxCryptor::decrypt($getMailSettings[0]['ssl_tls'], FYNX_CRYPTO_KEY) : null;
                    // Set TCP port to connect to
                    $this->mail->Port = $getMailSettings[0]['smtp_port'];
                }

                // From email address and name
                $this->mail->From = $_SESSION['org']['email'];
                $this->mail->FromName = "Administrator";
                // To address and name
                $this->mail->addAddress($email, $firstname . " " . $lastname);
                // Send HTML or Plain Text email
                $this->mail->isHTML(true);
                $this->mail->Subject = "Signin Credentials";
                $this->mail->Body = '
                    <div style="margin: 100px; padding: 20px; background-color: #F5F5F5;">
                        <div style="width: 100%; margin-bottom: 20px;"><h3>Auth Credentials</h3></div>
                        <div style="width: 100%; margin-bottom: 10px;"><b>Login URL:</b>: <em>https://thecheckit.com/public/auth/signin/' . $_SESSION['user_info']['org_id'] . '</em></div>
                        <div style="width: 100%; margin-bottom: 10px;"><b>Username</b>: <em>' . $email . '</em></div>
                        <div style="width: 100%; margin-bottom: 10px;"><b>Password</b>: <em>Password@1</em></div>
                        <div style="width: 100%; margin-bottom: 10px;"><em>Note: Please change your password once you signin. Thank you</em></div>
                    </div>';
                // Send E-mail
                // var_dump($this->mail);
                // $mail_status = !$this->mail->send() ? "Mailer Error: " : "Mail Sent: ";
                try {
                    $this->mail->send();
                    $mail_status = '<em class="bold">Mail Sent: </em>';
                } catch (Exception $e) {
                    $mail_status = '<em class="text-warning bold">Mailer Error: </em>';
                }
                // echo $mail_status;

                isset($img) ? $_SESSION['user_info']['img'] = $img : null;
                $_SESSION['log']['note'] = 'Examinee Added Successfully!';
                $this->add_record('ci_log', $_SESSION['log'])->go();
                $this->with('success', $mail_status . $_SESSION['log']['note'])->redirect('examinee/index');
                break;
        }
    }

    public function delete()
    {
        extract($_POST);
        $pattern = "/[\[\]\"]/s";
        $pattern1 = "/[\"]/s";
        if (isset($fynx_selected_id)) {
            $unedited_user_id_json = json_encode(explode(',', $fynx_selected_id));
            $edited_user_id_json = preg_replace($pattern, '', preg_replace($pattern1, "'", $unedited_user_id_json));
            $this->delete_record('ci_user')->in_where('user_id', $edited_user_id_json)->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
        } else {
            $this->delete_record('ci_user', $_POST)->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
        }
        $_SESSION['log']['note'] = 'Examinee(s) Deleted Successfully!';
        $this->add_record('ci_log', $_SESSION['log'])->go();
        $this->with('success', $_SESSION['log']['note'])->redirect('examinee/index');
    }

    public function update()
    {
        extract($_POST);
        if (isset($_FILES)) {
            foreach ($_FILES as $key => $value) {
                if (!empty($value['name'])) {
                    $this->filesystem->allow_overwriting();
                    $this->filesystem->set_input($key);
                    $this->filesystem->set_destination_directory(FYNX_PUBLIC['media'] . 'user-profile/');
                    $this->filesystem->set_auto_filename('.%s');
                    $this->filesystem->set_upload_function("copy");
                    $this->filesystem->save();
                    $_POST['img'] = $this->filesystem->get_info()->filename;
                }
            }
        }
        // highlight_string(print_r($this->filesystem->get_info(), true));
        $result = $this->update_record('ci_person', $_POST)->where('user_id', $user_id)->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
        switch ($result) {
            case false:
                $this->with('danger', 'Update Examinee was Unsuccessful!')->redirect('examinee/index');
                break;
            default:
                isset($_POST['img']) ? $_SESSION['user_info']['img'] = $_POST['img'] : null;
                $_SESSION['log']['note'] = 'Examinee Updated Successfully!';
                $this->add_record('ci_log', $_SESSION['log'])->go();
                $this->with('success', $_SESSION['log']['note'])->redirect('examinee/index');
                break;
        }
    }

    public function register_examinee()
    {
        extract($_POST);
        $pattern = "/[\[\]\"]/s";
        $pattern1 = "/[\"]/s";
        if (isset($fynx_selected_id)) {$user_id = explode(',', $fynx_selected_id);}
        $edited_test_id_json = preg_replace($pattern, '', preg_replace($pattern1, "'", json_encode($test_id)));
        $current_register_list_data = '';
        $multi_update = '(CASE';
        foreach ($test_id as $key => $value) {
            $all_register_list = $this->get_record('ci_test', 'register_list')->where('test_id', $value)->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
            if (is_array($user_id)) {
                foreach ($user_id as $user) {
                    if (!preg_match("/($user)/s", $all_register_list[0]['register_list'])) {
                        $current_register_list_data = $current_register_list_data . "," . $user;
                    }
                }
                if ($all_register_list[0]['register_list'] != null) {
                    $current_register_list_data = $all_register_list[0]['register_list'] . $current_register_list_data;
                } else {
                    $current_register_list_data = substr($current_register_list_data, 1);
                }
            } else {
                if (!preg_match("/($user_id)/s", $all_register_list[0]['register_list'])) {
                    if ($all_register_list[0]['register_list'] != null) {
                        $current_register_list_data = $all_register_list[0]['register_list'] . "," . $user_id;
                    } else {
                        $current_register_list_data = $user_id;
                    }
                }
            }

            if ($current_register_list_data == null) {
                $current_register_list_data = $all_register_list[0]['register_list'];
            }
            $multi_update = $multi_update . " WHEN test_id = '" . $value . "' THEN '" . $current_register_list_data . "' ";
            $current_register_list_data = '';
        }
        $multi_update = $multi_update . "END)";
        $multi_update_register_list = [
            'register_list' => $multi_update,
        ];
        $this->update_record('ci_test', $multi_update_register_list, 'multi')->in_where('test_id', $edited_test_id_json)->and_where('org_id', $_SESSION['user_info']['org_id'])->go();
        $_SESSION['log']['note'] = 'Registered Examinee(s) Successfully!';
        $this->add_record('ci_log', $_SESSION['log'])->go();
        $this->with('success', $_SESSION['log']['note'])->redirect('examinee/index');
    }

    public function send_message()
    {
        $getSmsSettings = $this->get_record('ci_settings_sms')->where('org_id', $_SESSION['user_info']['org_id'])->limit(1)->go();
        $getMailSettings = $this->get_record('ci_settings_mail')->where('org_id', $_SESSION['user_info']['org_id'])->limit(1)->go();

        if ($_POST['message_type'] == 1) {

        } else {
            // If SMTP method is enabled
            if (!empty($getMailSettings) && $getMailSettings[0]['mail_method'] == 2) {
                // Enable SMTP debugging.
                $this->mail->SMTPDebug = 0;
                // Set PHPMailer to use SMTP.
                $this->mail->isSMTP();
                // Set SMTP host name
                $this->mail->Host = $getMailSettings[0]['smtp_server'];
                // Set this to true if SMTP host requires authentication to send email
                $this->mail->SMTPAuth = true;
                // Provide username and password
                $this->mail->Username = $getMailSettings[0]['smtp_username'];
                $this->mail->Password = FynxCryptor::decrypt($getMailSettings[0]['smtp_password'], FYNX_CRYPTO_KEY);
                // If SMTP requires TLS encryption then set it
                !empty($getMailSettings[0]['ssl_tls']) ? $this->mail->SMTPSecure = FynxCryptor::decrypt($getMailSettings[0]['ssl_tls'], FYNX_CRYPTO_KEY) : null;
                // Set TCP port to connect to
                $this->mail->Port = $getMailSettings[0]['smtp_port'];
            }

            // From email address and name
            $this->mail->From = $_SESSION['org']['email'];
            $this->mail->FromName = "Administrator";
            // To address and name
            $this->mail->addAddress($_POST['email']);
            // Send HTML or Plain Text email
            $this->mail->isHTML(true);
            $this->mail->Subject = $_POST['subject'];
            $this->mail->Body = $_POST['message_content'];
            // Send mail
            $_SESSION['log']['note'] = !$this->mail->send() ? "Mailer Error: " : "Mail Sent: ";
            // try {
            //     $this->mail->send();
            //     $mail_status = "Mail Sent: ";
            // } catch (Exception $e) {
            //     $mail_status = "Mailer Error: ";
            // }

        }
        $this->add_record('ci_log', $_SESSION['log'])->go();
        $this->with($_SESSION['log']['note'] == "Mail Sent: " ? 'success' : 'danger', $_SESSION['log']['note'])->redirect('examinee/index');
    }
}